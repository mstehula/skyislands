
-- Forward Declarations

local round
local round_smaller
local round_larger

-- Private Interface

local function round(input)
	return math.floor(input + .5)
end

local function round_smaller(input)
	if input < 0 then
		return math.ceil(input)
	else
		return math.floor(input)
	end
end

local function round_larger(input)
	if input < 0 then
		return math.floor(input)
	else
		return math.ceil(input)
	end
end

local function generate_2d_perlin_map(radius)
	
end

-- Public Interface

function generate(radius, height)
	perlin_map = {}
	
	centeri = radius+1
	centerj = radius+1
	
	true_height = height + math.random(-2, 2)
	
	slope = height/radius
	print(slope)
	
	perlin_x = {}
	perlin_x[0] = 0
	
	perlin_y = {}
	perlin_y[0] = 0
	
	for i=1,radius*2+1 do
		perlin_x[i] = perlin_x[i-1] + math.random(-1, 1)
		perlin_y[i] = perlin_y[i-1] + math.random(-1, 1)
	end
	
	for i=1,radius*2+1 do
		perlin_map[i] = {}
		for j=1,radius*2+1 do
			perlin_map[i][j] = true_height - round(math.sqrt((i-centeri)*(i-centeri) + (j-centerj)*(j-centerj))*slope) + perlin_x[i] + perlin_y[j]
		end
	end
	
	perlin_map[centeri][centerj] = true_height;
	
	return perlin_map
end

function print_perlin_map(perlin_map)
	for i=1,#perlin_map do
		for j=1,#perlin_map[i] do
			if perlin_map[i][j] <= -10 then
				write(perlin_map[i][j])
			elseif perlin_map[i][j] < 0 then
				write(perlin_map[i][j] .. " ")
			elseif perlin_map[i][j] >= 10 then
				write(" " .. perlin_map[i][j])
			else
				write(" " .. perlin_map[i][j] .. " ")
			end
		end
		print()
	end
end

-- Command Line

args = {...}

usage = "The usage for this command is skyislands <diameter> <height>"

if type(args) == "nil" then 
	print(usage)
end
if #args == 2 then
	perlin_map = generate(args[1], args[2])
	print_perlin_map(perlin_map)
end
