-- Forward Declarations

-- Private Interface

local function generate(radius, height, slant)
  centerx, centery = 0, 0
  noisex, noisey = {}, {}
  noisex[0], noisey[0] = 0, 0

  for i=1,radius do
    noisex[i] = noisex[i-1] + math.random(-1, 1)
    noisex[-i] = noisex[-i+1] + math.random(-1, 1)
    noisey[i] = noisey[i-1] + math.random(-1, 1)
    noisey[-i] = noisey[-i+1] + math.random(-1, 1)
  end

  write("Noise, X: ")
  for i=-radius,radius do
    write(noisex[i].." ")
  end
  print()

  write("Noise, Y: ")
  for i=-radius,radius do
    write(noisey[i].." ")
  end
  print()

  noise = {}
  for i=-radius,radius do
    noise[i] = {}
    for j=-radius,radius do
      noise[i][j] = noisex[i] + noisey[j]
    end
  end


  base = {}
  for i=-radius,radius do
    base[i] = {}
    for j=-radius,radius do
      if slant == "quadratic" then
        slope = height/(radius*radius)
        distance = math.sqrt((i*i) + (j*j))
        base[i][j] = math.floor(slope*(distance-radius)*(distance+radius))
      elseif slant == "tordial" then
        slope = height/(radius*radius*(radius/2)*(radius/2))
        distance = math.sqrt((i*i) + (j*j))
        base[i][j] = math.floor(slope*(distance-radius)*(distance+radius)*(distance+(radius/2))*(distance-(radius/2)))
      else
        slope = radius/height
        distance = math.sqrt((i*i) + (j*j))
        base[i][j] = math.floor(distance/slope - height)
      end

--[[
      if base[i][j] <= -10 then
        write(base[i][j])
      elseif base[i][j] < 0 then
        write(base[i][j].." ")
      elseif base[i][j] < 10 then
        write(" "..base[i][j].." ")
      else
        write(" "..base[i][j])
      end
]]
    end
--    print()
  end

  map = {}
  for i=-radius,radius do
    map[i] = {}
    for j=-radius,radius do
      map[i][j] = base[i][j] + noise[i][j]

      if map[i][j] <= -10 then
        write(map[i][j])
      elseif map[i][j] < 0 then
        write(map[i][j].." ")
      elseif map[i][j] < 10 then
        write(" "..map[i][j].." ")
      else
        write(" "..map[i][j])
      end
    end
    print()
  end
end

-- Public Interface

-- Command line Interface

args = {...}

if type(args) == "nil" then
  error("Usage for this command is skylands <radius> <height>")
end

if #args == 2 then
  generate(args[1], args[2], "quadratic")
end
